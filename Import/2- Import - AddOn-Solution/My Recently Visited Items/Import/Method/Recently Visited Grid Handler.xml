<AML>
 <Item type="Method" id="DA7DB1FF385C449E91EDFDC4ECC77EEC" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// global variable "treeGrid1Instance"   must be declared in grid's html field on the form !!!
// global variable "innovator"  must be declared in grid's html field on the form !!!
// global variable "I18Ncntx"   must be declared in grid's html field on the form !!!

//include functions from code tree
var includeScript = document.createElement('script');
includeScript.src = "../javascript/include.aspx?classes=Dependencies";   // allows to call standard where-used & structure browser
document.head.appendChild(includeScript);

window.initTreeGrid1 = function(gridElementId) {
    var arasRelease="Aras10";

	treeGrid1Instance = new RecentlyVisitedGrid(arasRelease);
    treeGrid1Instance.loadHTML_DojoGridIntoElement(gridElementId);
};

window.ReloadMyList = function() {
  // refresh Grid
  treeGrid1Instance.Refresh();
};

window.ClearMyList = function() {
  // caller server method to do the job.
  if (!confirm("Continue clearing My Recently vistited list ?")) {return;}
  var itm = top.aras.newIOMItem("User Recently Visited Item","");
  var userId = top.aras.getUserID();

  itm.setAttribute("userID",userId);
  itm = itm.apply("RecentlyVisited sClear UsersList");
  
  if (itm.isError()) {top.aras.AlertError(itm.getErrorString());return;}
  
  // refresh Grid
  treeGrid1Instance.Refresh();
};

RecentlyVisitedGrid = function RecentlyVisitedGridFunc(arasRelease) {
  this.arasRelease = arasRelease;
  this.initialized = false;

  this.colHeadings = fn_getGridTablecolHeadings();
  this.colDefData = fn_getResultsGridTableDataColumnDef();
	
  this.icons = {};
  this.use_svg_icons = true;
  if (this.use_svg_icons)
  {
	this.icons["refresh"] = 					"../images/Refresh.svg";
  }
  this.constants = {
		fileItemTypeName: 		"File"
  };
};

RecentlyVisitedGrid.prototype = new BaseTreeGrid();

RecentlyVisitedGrid.prototype.initialize = function RecentlyVisitedGrid_Initialize() {
  var xml = '';
	xml += '<table font="' + "Microsoft Sans Serif-8" + '" ';
	xml += 'backgroundColor="white" sel_bgColor="steelbue" sel_TextColor="white" delim ="|" editable="false" ' +
	' draw_grid="true" multiselect="false" enableHtml="false" bgInvert="true" column_draggable="false" >';

	xml += '<thead>';
	for(var columnIndex = 0; columnIndex < this.colHeadings.length; columnIndex++) {
	  var colTitle;
	  if (this.colHeadings[columnIndex].Title) {
	    colTitle = this.colHeadings[columnIndex].Title;
	  }
	  else {
	    colTitle = this.getColumnLabelByName(this.colHeadings[columnIndex].PropItemType, this.colHeadings[columnIndex].PropName);
	  }
	  xml += ' <th align="c">' + colTitle + '</th>';
	}
	xml += '';
	xml += '</thead>';

	xml += '<columns>';
	for(columnIndex = 0; columnIndex < this.colHeadings.length; columnIndex++) {
		xml += ' <column width="' + this.colHeadings[columnIndex].Width + '" align="' + this.colHeadings[columnIndex].Align + '" edit="' + 
				this.colHeadings[columnIndex].EditType + '" order="' + columnIndex + '" colname="' + this.colHeadings[columnIndex].Name + '" />';
	}	
	xml += '';
	xml += '</columns>';

	xml += '<menu>';
	xml += '<emptytag/>';
	xml += '</menu>';
	xml += '</table>';

	this.grid.InitXML(xml);
    this.initialized = true;
	this.Refresh();
};

RecentlyVisitedGrid.prototype.Refresh = function RecentlyVisitedGrid_Refresh() {
	this.Draw();
};

// ======= Draw Search grid contents =======
RecentlyVisitedGrid.prototype.Draw = function RecentlyVisitedGrid_Draw() {
// itemIds = comma separated list of item ids
// selectProperties = comma separated list of property names

	this.grid.removeAllRows();
 	this.GridRowUserData = {};
	this.defaultMenu = this.initDefaultMenu();	

	var relSelectProperties = "sort_order,insert_date,item_id_string,item_config_id_string,item_type,item_generation";

	var userId = top.aras.getUserID();

	//## move this to server side in future !!! - use SQL for speed - keep logic to detect deleted items and remove from all user's recently lists

	var amlQuery = "<Item type='User Recently Visited Item' action='get' select='source_id,insert_date," + relSelectProperties + "' orderBy='insert_date DESC'>";
	amlQuery += "<source_id>"+userId+"</source_id>";
	amlQuery += "</Item>";
	
	amlQueryItem = new Item("","");
	amlQueryItem.loadAML(amlQuery);
	amlQueryItem = amlQueryItem.apply();
	
	for (var i = 0; i < amlQueryItem.getItemCount(); i++) {
		var recentlyVisitedItem = amlQueryItem.getItemByIndex(i);

	    this.AddItemRow(recentlyVisitedItem);
	}
 
};

RecentlyVisitedGrid.prototype.AddItemRow = function RecentlyVisitedGrid_AddItemRow(recentlyVisitedItem) {
    var rowItemType = recentlyVisitedItem.getProperty("item_type","");

 	var itemSelectProperties = "keyed_name,major_rev,generation,classification,state,current_state,locked_by_id(keyed_name)";
     var icon = fn_GetSmallIconFormatOfItemType(rowItemType);

	// fetch item by item from server -- ## needs performance improvement (move logic to server side)
    qry = top.aras.newIOMItem("","");
    qry.loadAML("<Item type='"+rowItemType+"' action='get' select='item_number,name,title,"+itemSelectProperties+"' id='"+recentlyVisitedItem.getProperty("item_id_string","invalid")+"' />");
    var rowItem = qry.apply();
    if (rowItem.isError()) {
      // remove all generations of this item from list of all users
      qry = top.aras.newIOMItem("","");
      qry.loadAML("<Item type='"+rowItemType+"' action='RecentlyVisited DelFrom UserList' id='"+recentlyVisitedItem.getProperty("item_id_string","invalid")+"' ><config_id>"+recentlyVisitedItem.getProperty("item_config_id_string","")+"</config_id></Item>");
      qry = qry.apply();
    }
    else {
      // add to display grid
      var newRowID = rowItem.getID();
      var newKn = fn_BuildItemKeyedName(rowItem);
      rowItem.setProperty("keyed_name",newKn);
 
	  // fill basic columns with data
	  var data = {itemNode: rowItem, relationshipNode: null};
	  var row = new RowClass(this,data,this.colHeadings,this.colDefData);
	
	  this.grid.insertRoot(newRowID, row.getValues(), newRowID, icon, icon);
	  row.bind(newRowID,null,rowItemType,newRowID);
    }
};

fn_BuildItemKeyedName = function (thisItem)
{
  var kn = "";
  var tmpKN;

  switch (thisItem.getType())
  {
   case "Document":
   case "Part":
   case "CAD":
   case "Manufacturer Part":
   case "Manufacturer":
      kn = thisItem.getProperty("item_number","");
      if (kn !== "") {kn = kn + " - " + thisItem.getProperty("name","");}
      else {kn = thisItem.getProperty("name","");}
     break;

   default:
    kn = thisItem.getProperty("keyed_name","");
    if (kn === "" || kn === thisItem.getID()) {
      kn = "";
      tmpKN = thisItem.getProperty("item_number","");
      if (tmpKN !== "") {kn = kn + tmpKN;}
    
      tmpKN = thisItem.getProperty("name","");
      if (tmpKN !== "") {kn = kn + " " + tmpKN;}

      tmpKN = thisItem.getProperty("title","");
      if (tmpKN !== "") {kn = kn + " " + tmpKN;}
 
      if (kn === "") {kn = thisItem.getID();}
    }
  }
  return kn;
};

RecentlyVisitedGrid.prototype.getGridRowUserData = function RecentlyVisitedGrid_getGridRowUserData(rowId, dataName) {
  if (!rowId || rowId === "") {return;}
  var retValue = "";
  switch(dataName)
  {
    case "gridData_rowItemType":
	  return this.GridRowUserData[rowId].itemType;
	  
    case "gridData_rowItemID":
    case "gridData_rowItemId":
	  return this.GridRowUserData[rowId].itemId;
  }
};
//-----------  BEGIN Grid's custom grid handlers
RecentlyVisitedGrid.prototype.onGridMenuClick = function RecentlyVisitedGrid_onGridMenuClick(menuChoice) {
  var menuItem = this.defaultMenu[parseInt(menuChoice, 10)];
  
  // call additional menu action handler
  fn_onResultsGridMenuClickAction(this,menuItem.name);
};

RecentlyVisitedGrid.prototype.onGridClick = function RecentlyVisitedGrid_onGridClick(eArg) {
	if (!this.initialized) {return;}
};

RecentlyVisitedGrid.prototype.onGridDoubleClick = function RecentlyVisitedGrid_onGridDoubleClick(eArg) {
  var rowId = eArg.rowId;

  var rowItemType = this.getGridRowUserData(rowId,"gridData_rowItemType");
  var rowItemId = this.getGridRowUserData(rowId,"gridData_rowItemID");
  eArg = {selectedId: rowId, rowItemType: rowItemType, rowItemId: rowItemId};

  fn_onOpenRowItem(this, eArg);
};

RecentlyVisitedGrid.prototype.onGridLinkClick = function RecentlyVisitedGrid_onGridLinkClick(eArg) {
    var data = eArg.linkData.replace(/'/g,"");
    var linkInfo = data.split(",");
    var rowId = linkInfo[2];
	if (linkInfo[1] === "{OpenRowItem}") {  
	  eArg = {selectedId: rowId, rowItemType: this.getGridRowUserData(rowId,"gridData_rowItemType"), rowItemId: this.getGridRowUserData(rowId,"gridData_rowItemId")};
	  fn_onOpenRowItem(this, eArg);
	}
	
	 //assumes only 1 link per row that links to the row's data item
  //  this.clickedGridLinkValue = strLink; 
};

RecentlyVisitedGrid.prototype.onGridMenuInit = function RecentlyVisitedGrid_onGridMenuInit(eArg) {
	//reset menu items, enable all
	for (var i = 0; i < this.defaultMenu.length; i++) {
		if (!this.defaultMenu[i].separator) {
			eArg.menuItems.push({
				label: this.defaultMenu[i].label,
				enabled: true,
				handler: this.defaultMenu[i].handler
			});
		} else {
			eArg.menuItems.push(this.defaultMenu[i]);
		}
	}
	return true;
};

RecentlyVisitedGrid.prototype.initDefaultMenu = function RecentlyVisitedGrid_initDefaultMenu() {
	var defaultMenu = [];
//	defaultMenu.push({separator: true });

    defaultMenu.push({name: "view_item", label: "View Item"});
    defaultMenu.push({name: "where_used", label: "Where Used"});
	
	return defaultMenu;
};

//------ BEGIN: local action handlers for menu or toolbar clicks
fn_onResultsGridMenuClickAction = function (gridCtxt, actionId) {
   var selectedId = gridCtxt.grid.getSelectedId(); //selected grid row
   var rowItemType = gridCtxt.getGridRowUserData(selectedId,"gridData_rowItemType");
   var rowItemId = gridCtxt.getGridRowUserData(selectedId,"gridData_rowItemID");
   
   //var checkMsg = fn_ValidateActionRequest(gridCtxt, actionId, rowItemType, selectedId);
   //if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

   var eArg = {selectedId: selectedId, rowItemType: rowItemType, rowItemId: rowItemId};

	switch(actionId)
	{
	  case "view_item":
	     fn_onOpenRowItem(gridCtxt, eArg);
	  	 break;
	  case "where_used":
	     Dependencies.View(rowItemType, rowItemId, true); // true = where used
	  	 break;
	 }
};
//-----------------
fn_onOpenRowItem = function (gridCtxt, eArg, checkForItemType) {
  var itemId = eArg.rowItemId;
  var itemType = eArg.rowItemType;
  if (itemId === "") {return;}

  if (top.aras.uiFindWindowEx(itemId)){return;}
  top.aras.uiShowItem(itemType, itemId);
};

//-----------  END Grid's custom grid handlers

// =======  Definition of grid header and columns layout =======
fn_getGridTablecolHeadings = function () {
  // PARAMETERS ARE:
	// Name: name of column, must be the same in all column definitions !!!
	// Title: if Title = undefined,  PropItemType and PropName must be set
	// PropItemType:
  	// PropName:
	// Width: in pixel
	// Align: l,r,c
	// EditType: noedit=disables edit on entire column, FIELD=text input, COMBO=drop down list
	// FilterEdit: same values as EditType. controls if cell in input_row can be edited

	// display order of columns left to right in order listed !!!
	var columnList = [
	{Name: "KN", 		PropItemType: "User Recently Visited Item",PropName: "keyed_name",	Width: "250",	Align: "l",	EditType: "noedit"},
	{Name: "LOCK", 		PropItemType: "User Recently Visited Item",PropName: "locked_by_id",	Width: "40",	Align: "c",	EditType: "noedit"},
	{Name: "REV", 		PropItemType: "User Recently Visited Item",PropName: "major_rev",	Width: "40",	Align: "c",	EditType: "noedit"},
	{Name: "GEN", 		PropItemType: "User Recently Visited Item",PropName: "generation",	Width: "40",	Align: "c",	EditType: "noedit"},
	{Name: "CLASS", 		PropItemType: "User Recently Visited Item",PropName: "classification",	Width: "170",	Align: "l",	EditType: "noedit"},
	{Name: "STATE", 		PropItemType: "User Recently Visited Item",PropName: "state",	Width: "120",	Align: "c",	EditType: "noedit"}
	];

	return columnList;
};

fn_getResultsGridTableDataColumnDef = function () {
  // COLUMN VALUE PARAMETERS ARE:
	// Class: optional - if missing "DefaultCellClass" will be used. Listed class can overwrite default cell functions,like UI formatting,if used.
	// PropItemType: optional
	// PropName: required, if Class is missing.
	// isRelProp: set to "false", if property value can be retrieved from item; set to "true", if property value can be retrieved from relationship  (if missing, it is set to "false")
	// CellBg: optional - set to a valid color value (i.e. "#ff0000") - if set to keyword "{propCSS}", the background color set in property's CSS will be used.
	// CellStaticValue: optional - if set to a text, it this text will be displayed instead of the property's value 
	// CellLinkKey: optional, CellLinkItemType must be set. 	if set to keyword {OpenRowItem}, the registered type and id of the row will be opened.
    //															if set to keyword {FilesOfRelatedItem}, the files attached to rowItem (i.e. Document will be shown (more rules TBD)
	// isEditable: optional (default= false), set to "true" to allow edits (grid must be set to editable, as well)

    // Index must match a columnName of HeadingsAndLayout !!! 
	var columnList = [];
	columnList["KN"] =		{PropItemType: "User Recently Visited Item",	PropName: "keyed_name",		CellLinkKey:"{OpenRowItem}"};
	columnList["LOCK"] =	{PropItemType: "User Recently Visited Item",	PropName: "locked_by_id",	CellValueType: "lock"};
	columnList["REV"] =		{PropItemType: "User Recently Visited Item",	PropName: "major_rev"};
	columnList["GEN"] =		{PropItemType: "User Recently Visited Item",	PropName: "generation"};
	columnList["CLASS"] =	{PropItemType: "User Recently Visited Item",	PropName: "classification"};
	columnList["STATE"] =	{PropItemType: "User Recently Visited Item",	PropName: "state",			CellBg: "{propCSS}"};

	return columnList;
};
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Recently Visited Grid Handler</name>
 </Item>
</AML>