<AML>
 <Item type="Method" id="946A49C8AAEB4043BB1D1A65163DE78D" action="add">
  <comments>Recently Visited Add-On Package</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Generic method: RecentlyVisited_sAddToUsersList
// Trigger: Called from client-side method
//

//System.Diagnostics.Debugger.Break();

string thisId = this.getID();
string thisType = this.getType();

if (thisId == "" || thisType =="") {return this;}

string userId = this.getInnovator().getUserID();
  
// get this Item with relevant data
string selectProps = "id,config_id,current_state,classification,generation,major_rev,keyed_name";
  
Item aml_cmd = this.newItem(thisType, "get");
aml_cmd.setID(thisId);
aml_cmd.setAttribute("doGetItem","0");
aml_cmd.setAttribute("serverEvents","0");
aml_cmd.setAttribute("select",selectProps);
  
Item thisItem = aml_cmd.apply();
if(thisItem.isError()) {return thisItem;}

//check if active recently visited preference for this itemtype and user is available ?
aml_cmd = this.newItem("Method", "Get RecentlyVisited Preferences");
aml_cmd.setAttribute("itemTypes", thisType);
aml_cmd = aml_cmd.apply();

int recentlyVisitedCount = Convert.ToInt32(aml_cmd.getProperty("recently_visited_count","10"));

//## check, if FormId has "enabled" setting in recently visited preferences. (formID must be passed from client side - how)

//add to users recently visited list
aml_cmd = AddRecentlyVisited(userId, thisItem, recentlyVisitedCount);
if (aml_cmd.isError()) {return aml_cmd;}
  
return this;
}

//------------
Item AddRecentlyVisited (string userId, Item thisItem, int recentlyVisitedCount) {

  DateTime  dtNow = System.DateTime.UtcNow;
  string tmpPtrn  = "yyyy-MM-ddTHH:mm:ss";
  string tmpDt  = dtNow.ToString(tmpPtrn, DateTimeFormatInfo.InvariantInfo);
  I18NSessionContext sCntxt =  this.getInnovator().getI18NSessionContext();

  string dtNowStr = sCntxt.ConvertUtcDateTimeToNeutral(tmpDt, tmpPtrn);

  string whereStr = "[User_Recently_Visited_Item].source_id='" + userId + "'";
  whereStr += " and [User_Recently_Visited_Item].item_id_string='"+ thisItem.getID() +"'";
  whereStr += " and [User_Recently_Visited_Item].item_generation='"+ thisItem.getProperty("generation","") +"'";

  Item recentlyVisited = this.newItem("User Recently Visited Item","merge");
  recentlyVisited.setAttribute("serverEvents","0");
  recentlyVisited.setAttribute("where",whereStr);
  recentlyVisited.setProperty("source_id", userId);
  recentlyVisited.setProperty("insert_date", dtNowStr);
  recentlyVisited.setProperty("item_type", thisItem.getType());
  recentlyVisited.setProperty("item_id_string", thisItem.getID());
  recentlyVisited.setProperty("item_config_id_string", thisItem.getProperty("config_id",""));
  recentlyVisited.setProperty("item_generation", thisItem.getProperty("generation",""));
  
  Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Administrators");
  bool PermissionWasSet = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

  recentlyVisited = recentlyVisited.apply();
  if (recentlyVisited.isError()) {return recentlyVisited;}

  //clean user's recently visited list from stale entries (items that got deleted already)
  Item aml_cmd = this.newItem("Method","RecentlyVisited DelStaleEntries");
  aml_cmd = aml_cmd.apply();
  
  //read user's recently visited list straight from DB table
  string SQLstr = "SELECT id,insert_date,item_type,item_id_string,item_generation from [User_Recently_Visited_Item]";
  SQLstr += " WHERE [User_Recently_Visited_Item].source_id='"+ userId +"' ORDER BY insert_date DESC";
  aml_cmd = this.getInnovator().applySQL(SQLstr);
  if (aml_cmd.isError()) {return aml_cmd;}
  
  // remove rows > user's recently visited count
  if (aml_cmd.getItemCount() > recentlyVisitedCount) {
    for (int i=recentlyVisitedCount; i<aml_cmd.getItemCount(); i++) {
      Item delCmd = this.newItem("User Recently Visited Item","delete");
      delCmd.setID(aml_cmd.getItemByIndex(i).getProperty("id","invalid"));
      delCmd = delCmd.apply();
      if (delCmd.isError() ) {return delCmd;}
    }
  }
  
  if (PermissionWasSet) {Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);}	

  return recentlyVisited;

]]></method_code>
  <method_type>C#</method_type>
  <name>RecentlyVisited_sAddToUsersList</name>
 </Item>
</AML>